from flask import Flask, jsonify, abort, request, make_response, url_for
from flask import Resource, reqparse, fields
import json
from subprocess import check_output, Popen, PIPE
import os,sys,re
import requests

service_dir = os.path.dirname(os.path.abspath(__file__))
sys.path.append(service_dir + '/../lib')
sys.path.append(service_dir + '/../')
import util
from rest_server import app

ns = api.namespace('Fetch sequences', description='fetch-sequences operations')

parser = api.parser()
parser.add_argument('genome', type=str, help='Name of genme')
parser.add_argument('u', type=str, help='url of the file')
parser.add_argument('i', type=FileStorage, localtion='form')
#### fetch_sequence
#### return: {'output' : error, 'command' : command, 'server' : result file URL}
@app.route('/fetch-sequences', methods = ['POST', 'GET'])
def get_sequences():
    output_choice = 'email'
    files = ''
    if request.method == 'POST':
        data = request.form or request.get_json(force=True)
        files = request.files
    elif request.method == 'GET':
        data = request.args
        output_choice = 'display'
    command = util.perl_scripts + '/fetch-sequences'

    if 'h' in data: # help message and list options
        command += ' -h'
    
    mandatory_parameters = ['genome']
    optional_parameters = ['u','header_format','upstr_ext','downstr_ext','extend','reference','top','chunk']
    default_param_values = {'header_format':'UCSC'}
    fileupload_parameters = ['i']
    
    ## Read regular parameters
    parameters = util.read_parameters(data, mandatory_parameters, optional_parameters, default_param_values)
    if parameters['error'] != 0:
        return parameters['error_message']
    command += parameters['arguments']
    ## Upload input file if specified
    tmp_dir = util.make_tmp_dir('fetch-sequences')
    input_files = util.read_fileupload_parameters(data, files, fileupload_parameters, 'fetch-sequences', tmp_dir)
    if input_files['error'] != 0:
        if not 'u' in data:
            return input_files['error_message']
    else:
        if not 'u' in data:
            command += input_files['arguments']

    return util.run_command(command, output_choice, 'fetch-sequences', 'fasta', tmp_dir,parameters['content_type'])
